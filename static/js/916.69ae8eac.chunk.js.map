{"version":3,"file":"static/js/916.69ae8eac.chunk.js","mappings":"qOAEaA,EAAaC,EAAAA,GAAAA,IAAH,+TAcVC,EAAiBD,EAAAA,GAAAA,IAAH,uUAkBdE,EAAgBF,EAAAA,GAAAA,OAAH,usB,iBC9BX,SAASG,EAAT,GAAgD,EAAxBC,MAAwB,EAAjBC,KAAkB,IAAZC,EAAW,EAAXA,QAClD,OACE,UAACP,EAAD,YACE,SAACG,EAAD,CAAeK,QAASD,EAASE,KAAK,SAAtC,UACE,SAAC,MAAD,CAASC,UAAU,kBAErB,UAACR,EAAD,YACE,cAAGQ,UAAU,QAAb,wBACA,cAAGA,UAAU,OAAb,qDAIP,CCdc,SAASC,EAAgBC,EAAKC,GAC3C,OAA0BC,EAAAA,EAAAA,WAAS,WAAO,IAAD,EACvC,iBAAOC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQP,WAA9C,QAAuDC,CACxD,IAFD,eAAOO,EAAP,KAAcC,EAAd,KAQA,OAJAC,EAAAA,EAAAA,YAAU,WACRL,OAAOC,aAAaK,QAAQX,EAAKG,KAAKS,UAAUJ,GACjD,GAAE,CAACR,EAAKQ,IAEF,CAACA,EAAOC,EAChB,C,cCNc,SAASI,IAGtB,MAA0Bd,EAAgB,QAAS,IAAnD,eAAOe,EAAP,KAAcC,EAAd,KACA,EAAgChB,EAAgB,WAAY,IAA5D,eAAOiB,EAAP,KAAiBC,EAAjB,KACA,GAAkCf,EAAAA,EAAAA,WAAS,GAA3C,eAAOgB,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,SAAAC,GACnBA,EAAMC,iBACN,MAAwBD,EAAME,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHT,EAASU,GACT,MAEF,IAAK,WACHR,EAAYQ,GACZ,MAEF,QACE,OAGL,EAED,OACE,4BACE,kCACA,kBAAMC,aAAa,MAAnB,WACE,8BACE,8DACA,kBACE7B,KAAK,QACL2B,KAAK,QACLG,SAAUP,EACVK,MAAOX,QAIX,8BACE,oEACA,kBACEjB,KAAK,WACL2B,KAAK,WACLG,SAAUP,EACVK,MAAOT,QAIX,mBAAQnB,KAAK,SAASD,QAAS,kBAAMuB,GAAa,EAAnB,EAA/B,8HAIF,mBAAQvB,QAAS,kBAAMuB,GAAa,EAAnB,EAAjB,uCAGCD,IACCU,EAAAA,EAAAA,eACE,SAACpC,EAAD,CAAcG,QAAS,kBAAMwB,GAAa,EAAnB,IACvBU,SAASC,QAIlB,C","sources":["components/Modal/Modal.styled.js","components/Modal/ModalContent.jsx","hooks/useLocalStorage.js","components/HooksExamples/Form.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const ModalrWrap = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  display: flex;\n  overflow: hidden;\n  width: 240px;\n  height: 80px;\n  border-radius: 8px;\n  background-color: #e0f7fa;\n  transform: translate(-50%, -50%);\n  transition: transform 300ms cubic-bezier(0.65, 1.43, 0, -1.33);\n  padding: 24px;\n`;\nexport const MessageWelkome = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n  .title {\n    font-size: 24px;\n    font-weight: 500;\n    text-align: center;\n    color: #2196f3;\n  }\n  .text {\n    font-size: 16px;\n    text-align: center;\n    color: #2196f3;\n  }\n`;\nexport const BtnClosePopUp = styled.button`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  background-color: #e7e9fc;\n  color: #2e2f42;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #64b5f6;\n    color: white;\n  }\n  .close-icon {\n    width: 20px;\n    height: 20px;\n    fill: currentColor;\n  }\n`;\n","import React from 'react';\nimport { BtnClosePopUp, MessageWelkome, ModalrWrap } from './Modal.styled';\nimport { IoClose } from 'react-icons/io5';\n\nexport default function ModalContent({ title, text, onClose }) {\n  return (\n    <ModalrWrap>\n      <BtnClosePopUp onClick={onClose} type=\"button\">\n        <IoClose className=\"close-icon\" />\n      </BtnClosePopUp>\n      <MessageWelkome>\n        <h className=\"title\">Welcome !</h>\n        <p className=\"text\">You have successfully registered !</p>\n      </MessageWelkome>\n    </ModalrWrap>\n  );\n}\n","import { useEffect, useState } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import ModalContent from 'components/Modal/ModalContent';\nimport useLocalStorage from 'hooks/useLocalStorage';\nimport React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\n// import { useLocalStorage } from './hooks/useLocalStorage';\n\nexport default function Form() {\n  // Цей стейт буде викликаний один раз під час першого рендеру useEffect\n\n  const [email, setEmail] = useLocalStorage('email', '');\n  const [password, setPassword] = useLocalStorage('password', '');\n  const [showModal, setShowModal] = useState(false);\n\n  const handleChange = event => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n    // reset();\n  };\n\n  return (\n    <div>\n      <h2>Form</h2>\n      <form autoComplete=\"off\">\n        <label>\n          <span>Почта</span>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            value={email}\n          />\n        </label>\n\n        <label>\n          <span>Пароль</span>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            value={password}\n          />\n        </label>\n\n        <button type=\"submit\" onClick={() => setShowModal(true)}>\n          Зарегистрироваться\n        </button>\n      </form>\n      <button onClick={() => setShowModal(true)}>\n        Show modal using a portal\n      </button>\n      {showModal &&\n        createPortal(\n          <ModalContent onClose={() => setShowModal(false)} />,\n          document.body\n        )}\n    </div>\n  );\n}\n"],"names":["ModalrWrap","styled","MessageWelkome","BtnClosePopUp","ModalContent","title","text","onClose","onClick","type","className","useLocalStorage","key","defaultValue","useState","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","Form","email","setEmail","password","setPassword","showModal","setShowModal","handleChange","event","preventDefault","target","name","value","autoComplete","onChange","createPortal","document","body"],"sourceRoot":""}